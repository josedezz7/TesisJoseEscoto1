@model Ecommerce.Models.Products.ProductsDetailsComment
@{
    ViewBag.Title = "ViewProductDetail";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="container">
    <div class="panel panel-default">
        <div class="panel-heading">Detalle del producto</div>
        <div class="row">
            <div class="col-4">

            </div>
            <div class="col-4">
                <div class="img-zoom-container" onmousenter="showme(this)">

                    <span><p class="imgid" style="allign:center;"><img id="myimage" src="https://i2.wp.com/images-eu.ssl-images-amazon.com/images/I/510inCKMSuL._SL160_.jpg?w=780&ssl=1" srcset="~/ProductImages/@Model.product.ProductImage" width="300" height="200"></p></span>

                    <span id="myhide" style="float: right;
                        position: absolute;
                        top: -100px;
                        left: 300px;
                        width: auto;
                        height: 100%;">
                        <div id="myresult" class="img-zoom-result" onmouseleave="hideme(this)"></div>
                    </span>
                </div>
            </div>
            <div class="col-4">

            </div>
        </div>
        <ul class="list-group">
            <li class="list-group-item">Nombre del producto: @Model.product.ProductName</li>
            <li class="list-group-item">Categoria: @Model.product.Tbl_Category.CategoryName </li>
            <li class="list-group-item">Precio: @Model.product.Price</li>
            <li class="list-group-item">Descripcion del producto: @Model.product.Description</li>
        </ul>

    </div>

    <div class="card mb-3">
        <div class="card-header">
            Detalle de Caracteristicas
        </div>

        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                        </tr>
                    </thead>
                    <tbody>
                        @{

                            foreach (var item in Model.product.Tbl_Product_Characteristics)
                            {

                                <tr>
                                    <td>@item.Characteristic</td>
                                </tr>
                            }

                        }

                    </tbody>
                </table>
            </div>

        </div>
    </div>



    <div class="card mb-3">
        <div class="card-header">

            @using (Html.BeginForm("AddComment", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()

                @Html.HiddenFor(model => model.product.ProductId, new { htmlAttributes = new { @class = "form-control" } })

                <div class="form-group">
                    @Html.Label("Nombre", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.review.Reviewer, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>

                <br />
                <br />
                <br />
                <br />
                <br />

                <div class="form-group">
                    @Html.Label("Comentario", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(m => m.review.Comment, new { @class = "form-control", @rows = "10", @cols = "40" })
                    </div>
                </div>

                <br />
                <br />
                <br />
                <br />
                <br />
                <br />
                <br />
                <br />
                <br />
                <br />
                <br />
                <br />

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Guardar" class="btn btn-default" />
                    </div>
                </div>
            }
        </div>
    </div>


    @foreach (var item in Model.reviews)
    {
        <div class="card mb-3">
            <div class="card-header">
                <div class="row">
                    <div class="col-md-8">
                        <div class="media g-mb-30 media-comment">
                            <div class="media-body u-shadow-v18 g-bg-secondary g-pa-30">
                                <div class="g-mb-15">
                                    <h5 class="h5 g-color-gray-dark-v1 mb-0">@item.Reviewer</h5>
                                    @*<span class="g-color-gray-dark-v4 g-font-size-12">5 days ago</span>*@
                                </div>

                                <p>@item.Comment</p>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

</div>


@section Scripts {
    <script>
        imageZoom("myimage", "myresult");
        function imageZoom(imgID, resultID) {
            var img, lens, result, cx, cy;
            img = document.getElementById(imgID);
            result = document.getElementById(resultID);
            /*create lens:*/
            lens = document.createElement("DIV");
            lens.setAttribute("class", "img-zoom-lens");
            /*insert lens:*/
            img.parentElement.insertBefore(lens, img);
            /*calculate the ratio between result DIV and lens:*/
            console.log("result.offsetWidth  >>>>>", result.offsetWidth, "lens.offsetWidth>>>>>>>>>>>", lens.offsetWidth);
            cx = 300 / lens.offsetWidth;
            console.log("result.offsetHeight>>>>>", result.offsetHeight, "llens.offsetHeighth>>>>>>>>>>>", lens.offsetHeight);
            cy = 300 / lens.offsetHeight;
            /*set background properties for the result DIV:*/
            result.style.backgroundImage = "url('" + img.srcset + "')";
            result.style.backgroundSize = (img.width * cx) + "px " + (img.height * cy) + "px";
            /*execute a function when someone moves the cursor over the image, or the lens:*/
            lens.addEventListener("mousemove", moveLens);
            img.addEventListener("mousemove", moveLens);
            /*and also for touch screens:*/
            lens.addEventListener("touchmove", moveLens);
            img.addEventListener("touchmove", moveLens);
            // img.addEventListener("mouseenter", bigImg);



            function bigImg(x) {
                console.log("onmouseenter >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
            }

            function normalImg(x) {
                //result.style.display ="none";
                console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>onmousLEAVE");
            }



            function moveLens(e) {
                var pos, x, y;
                /*prevent any other actions that may occur when moving over the image:*/
                e.preventDefault();
                /*get the cursor's x and y positions:*/
                pos = getCursorPos(e);
                /*calculate the position of the lens:*/
                x = pos.x - (lens.offsetWidth / 2);
                y = pos.y - (lens.offsetHeight / 2);
                // console.log("x" , x , "and Y " , y);
                /*prevent the lens from being positioned outside the image:*/
                if (x > img.width - lens.offsetWidth) { x = img.width - lens.offsetWidth; } //else{img.addEventListener("mouseenter", bigImg);  }
                if (x < 0) { x = 0; }
                if (y > img.height - lens.offsetHeight) { y = img.height - lens.offsetHeight; img.addEventListener("mouseleave", normalImg); }//else{img.addEventListener("mouseenter", bigImg);  }
                if (y < 0) { y = 0; }
                /*set the position of the lens:*/
                lens.style.left = x + "px";
                lens.style.top = y + "px";
                /*display what the lens "sees":*/
                result.style.backgroundPosition = "-" + (x * cx) + "px -" + (y * cy) + "px";
            }
            function getCursorPos(e) {
                var a, x = 0, y = 0;
                e = e || window.event;
                /*get the x and y positions of the image:*/
                a = img.getBoundingClientRect();
                //console.log("------------------A  left" ,  a );
                /*calculate the cursor's x and y coordinates, relative to the image:*/
                x = e.pageX - a.left;
                y = e.pageY - a.top;
                /*consider any page scrolling:*/
                x = x - window.pageXOffset;
                y = y - window.pageYOffset;
                return { x: x, y: y };
            }

        }

        function hideme(x) {
            //x.style.display = "none";

        }
        function showme(x) {
            //x.style.display = "block";

        }
    </script>
}
